<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://runmoony.github.io/author/RunMoony/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://runmoony.github.io/" rel="alternate" type="text/html" />
  <updated>2021-09-09T22:58:44+09:00</updated>
  <id>https://runmoony.github.io/author/RunMoony/feed.xml</id>

  
  
  

  
    <title type="html">코린이의 일기장 | </title>
  

  
    <subtitle>안하는것보다 낫겠지...하는 코딩 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Express로 웹 사이트 만들기_01.미들웨어</title>
      <link href="https://runmoony.github.io/nodejs7" rel="alternate" type="text/html" title="Express로 웹 사이트 만들기_01.미들웨어" />
      <published>2021-09-08T19:36:00+09:00</published>
      <updated>2021-09-08T19:36:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs7</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs7">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
원래 블로그 컨셉을 ‘일기장’ 으로 정했는데, 지금까지는 글쓰기가 너무 귀찮아서 코드만 틱!하고 업로드한것 같다. 오늘부터는 꼭 글도 추가해서 업로드 해야지~ 몇일 안갈거 같지만 달려라 런무니…시~~장! 아니 작!&lt;/p&gt;

&lt;p&gt;지금까지는 프레임워크 없이 간단한 웹사이트를 만들었다면, 이번부터는  Express 라는 NODEJS의 가장 대표적인 프레임워크를 사용하여 간단한 웹사이트를 만들어 볼 것이다. 과연 Express를 사용하고 안하고 얼마나 많은 차이가 있을것인가…궁금하다.&lt;/p&gt;

&lt;p&gt;일단 express를 require 해주시고~&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그담엔 fs도 require 해주시고~ 이따가 파일 읽어올때 사용할것이다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그다음엔 express app객체를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;포트를 설정해주시고~ 나는 PORT 5000으로 설정!&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Server is good!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫 미들웨어 등장!! 일단 앞에 path를 써주고 뒤에 req,res 인자까지…전에랑 비슷하군. 아 path는 어떤경로로 접근을 했을 때 응답을 줄지 나타내는것이다. res인자 다음에 next인자 란? node는 대부분 비동기로 처리되기 때문에 언제 어떤 작업이 끝날지 정확히 알수있다. 그래서! 명시적으로 작업이 끝났을때, 알려줘야 하기때문에 next가 필요하다. 일기가 너무 길어도 안되니…next()전에 내용은 생략(간단하기 때문에 나중에 봐도 문제없이 잘 생각나겠지).  그리고 엄청중요한거! requestedAt을 다른 미들웨어로 넘겨주고싶다면 어떻게 할까. 생각보다 간단했다. 한 요청에 대해 req오브젝트는 처음부터 끝까지 같은 오브젝트로 유지되기때문에 req.requestedAt = requestedAt 요런식으로 해주면 다른 미들웨어에서 불러서 쓸수있다람쥐.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Middleware 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestedAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestedAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestedAt&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileContent&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두번째 미들웨어 시작!! 아래와 같이 응답해주시고~&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Middleware 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Requested at &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 직접 확인해보시길~&lt;/p&gt;

&lt;p&gt;마지막으로 전체코드 올리겠다.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;const express = require(&amp;#39;express&amp;#39;)
const fs = require(&amp;#39;fs&amp;#39;)

const app = express()

const PORT = 5000

app.use(&amp;#39;/&amp;#39;, async (req, res, next) =&amp;gt; {
  console.log(&amp;#39;Middleware 1&amp;#39;)

  const fileContent = await fs.promises.readFile(&amp;#39;file&amp;#39;)

  const requestedAt = new Date()
  req.requestedAt = requestedAt
  req.fileContent = fileContent
  next()
})

app.use((req, res) =&amp;gt; {
  console.log(&amp;#39;Middleware 2&amp;#39;)
  res.send(`Requested at ${req.requestedAt}, ${req.fileContent}`)
})

app.listen(PORT, () =&amp;gt; {
  console.log(&amp;#39;Server is good!&amp;#39;)
})
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/234d1e5c95a5c60c21c6801e19021df6.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어 원래 블로그 컨셉을 ‘일기장’ 으로 정했는데, 지금까지는 글쓰기가 너무 귀찮아서 코드만 틱!하고 업로드한것 같다. 오늘부터는 꼭 글도 추가해서 업로드 해야지~ 몇일 안갈거 같지만 달려라 런무니…시~~장! 아니 작!</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기</title>
      <link href="https://runmoony.github.io/nodejs6" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기" />
      <published>2021-08-29T19:36:00+09:00</published>
      <updated>2021-08-29T19:36:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs6</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs6">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
database.json&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;{
    &amp;quot;posts&amp;quot;:[
        {&amp;quot;id&amp;quot;:&amp;quot;first_post&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;나의 첫 포스트&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;안녕하세요!&amp;quot;},
        {&amp;quot;id&amp;quot;:&amp;quot;second_post&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;나의 두번째 포스트&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;runmoony 입니다&amp;quot;},
        {&amp;quot;id&amp;quot;:&amp;quot;hello&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;hello&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;mycontent&amp;quot;}
    ]
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/7d25f44411b4615bd4d8c3e45f8ecf37.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
api.js&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;const fs = require(&amp;#39;fs&amp;#39;)
const DB_JSON_FILENAME = &amp;#39;database.json&amp;#39;

async function getPosts() {
  const json = await fs.promises.readFile(DB_JSON_FILENAME, &amp;#39;utf-8&amp;#39;)
  return JSON.parse(json).posts
}

async function savePosts(posts) {
  const content = {
    posts,
  }

  return fs.promises.writeFile(
    DB_JSON_FILENAME,
    JSON.stringify(content),
    &amp;#39;utf-8&amp;#39;
  )
}

const routes = [
  {
    url: /^\/posts$/,
    method: &amp;#39;GET&amp;#39;,
    callback: async () =&amp;gt; ({
      statusCode: 200,
      body: await getPosts(),
    }),
  },

  {
    url: /^\/posts\/([a-zA-Z0-9-_]+)$/,
    method: &amp;#39;GET&amp;#39;,
    callback: async (matches) =&amp;gt; {
      const postId = matches[1]
      if (!postId) {
        return {
          statusCode: 404,
          body: &amp;#39;Not found&amp;#39;,
        }
      }

      const posts = await getPosts()
      const post = posts.find((_post) =&amp;gt; _post.id === postId)

      if (!post) {
        return {
          statusCode: 404,
          body: &amp;#39;Not found&amp;#39;,
        }
      }

      return {
        statusCode: 200,
        body: post,
      }
    },
  },

  {
    url: /^\/posts$/,
    method: &amp;#39;POST&amp;#39;,
    callback: async (_, body) =&amp;gt; {
      if (!body) {
        return {
          statusCode: 400,
          body: &amp;#39;Ill-formed request.&amp;#39;,
        }
      }

      const title = body.title
      const newPost = {
        id: title.replace(/\s/g, &amp;#39;_&amp;#39;),
        title,
        content: body.content,
      }

      const posts = await getPosts()
      posts.push(newPost)
      savePosts(posts)

      return {
        statusCode: 200,
        body: newPost,
      }
    },
  },
]

module.exports = {
  routes,
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/d50da05df8831325e9493b181f074fd3.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어 database.json { &amp;quot;posts&amp;quot;:[ {&amp;quot;id&amp;quot;:&amp;quot;first_post&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;나의 첫 포스트&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;안녕하세요!&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;second_post&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;나의 두번째 포스트&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;runmoony 입니다&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;hello&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;hello&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;mycontent&amp;quot;} ] } api.js const fs = require(&amp;#39;fs&amp;#39;) const DB_JSON_FILENAME = &amp;#39;database.json&amp;#39; async function getPosts() { const json = await fs.promises.readFile(DB_JSON_FILENAME, &amp;#39;utf-8&amp;#39;) return JSON.parse(json).posts } async function savePosts(posts) { const content = { posts, } return fs.promises.writeFile( DB_JSON_FILENAME, JSON.stringify(content), &amp;#39;utf-8&amp;#39; ) } const routes = [ { url: /^\/posts$/, method: &amp;#39;GET&amp;#39;, callback: async () =&amp;gt; ({ statusCode: 200, body: await getPosts(), }), }, { url: /^\/posts\/([a-zA-Z0-9-_]+)$/, method: &amp;#39;GET&amp;#39;, callback: async (matches) =&amp;gt; { const postId = matches[1] if (!postId) { return { statusCode: 404, body: &amp;#39;Not found&amp;#39;, } } const posts = await getPosts() const post = posts.find((_post) =&amp;gt; _post.id === postId) if (!post) { return { statusCode: 404, body: &amp;#39;Not found&amp;#39;, } } return { statusCode: 200, body: post, } }, }, { url: /^\/posts$/, method: &amp;#39;POST&amp;#39;, callback: async (_, body) =&amp;gt; { if (!body) { return { statusCode: 400, body: &amp;#39;Ill-formed request.&amp;#39;, } } const title = body.title const newPost = { id: title.replace(/\s/g, &amp;#39;_&amp;#39;), title, content: body.content, } const posts = await getPosts() posts.push(newPost) savePosts(posts) return { statusCode: 200, body: newPost, } }, }, ] module.exports = { routes, }</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2</title>
      <link href="https://runmoony.github.io/nodejs5" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2" />
      <published>2021-08-27T19:36:00+09:00</published>
      <updated>2021-08-27T19:36:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs5</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs5">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;const posts = [
    {
      id: &amp;#39;my_first_post&amp;#39;,
      title: &amp;#39;My first post&amp;#39;,
      content: &amp;#39;Hello&amp;#39;,  
    },
    {
      id: &amp;#39;my_second_post&amp;#39;,
      title: &amp;#39;나의 두번째 포스트&amp;#39;,
      content: &amp;#39;Second post!&amp;#39;,
    },     
]
  
const routes = [
    {
        url: /^\/posts$/,
        method: &amp;#39;GET&amp;#39;,
        callback: async () =&amp;gt; ({
            statusCode: 200,
            body: posts,
        }),
    },

    {
        url: /^\/posts\/([a-zA-Z0-9-_]+)$/,
        method: &amp;#39;GET&amp;#39;,
        callback: async (matches) =&amp;gt; {
            const postId = matches[1]
            if (!postId) {
                return {
                    statusCode: 404,
                    body: &amp;#39;Not found&amp;#39;,
                }
            }

            const post = posts.find(_post =&amp;gt; _post.id === postId)

            if (!post) {
                return {
                    statusCode: 404,
                    body: &amp;#39;Not found&amp;#39;,
                }
            }

            return {
                statusCode: 200,
                body: post,
            }
        },
    },

    {
        url: /^\/posts$/,
        method: &amp;#39;POST&amp;#39;,
        callback: async (_, body) =&amp;gt; {
            if (!body) {
                return {
                    statusCode: 400,
                    body: &amp;#39;Ill-formed request.&amp;#39;
                }
            }

            const title = body.title
            const newPost = {
                id: title.replace(/\s/g, &amp;#39;_&amp;#39;),
                title,
                content: body.content,
            }

            posts.push(newPost)
            
            return {
                statusCode: 200,
                body: newPost,
            }
        },
    },
]

module.exports = {
    routes,
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/cd3c56f592fab98d2b1b77f23b2d3f25.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1</title>
      <link href="https://runmoony.github.io/nodejs4" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1" />
      <published>2021-08-21T19:36:00+09:00</published>
      <updated>2021-08-21T19:36:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs4</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs4">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;const posts = [
    {
      id: &amp;#39;my_first_post&amp;#39;,
      title: &amp;#39;My first post&amp;#39;,
      content: &amp;#39;Hello&amp;#39;,  
    },
    {
      id: &amp;#39;my_second_post&amp;#39;,
      title: &amp;#39;나의 두번째 포스트&amp;#39;,
      content: &amp;#39;Second post!&amp;#39;,
    },     
]
  
const routes = [
    {
        url: /^\/posts$/,
        method: &amp;#39;GET&amp;#39;,
        callback: async () =&amp;gt; ({
            statusCode: 200,
            body: {},
        }),
    },

    {
        url: /^\/posts\/([a-zA-Z0-9-_]+)$/,
        method: &amp;#39;GET&amp;#39;,
        callback: async () =&amp;gt; ({
            statusCode: 200,
            body: {},
        }),
    },

    {
        url: /^\/posts\/([a-zA-Z0-9-_]+)$/,
        method: &amp;#39;POST&amp;#39;,
        callback: async () =&amp;gt; ({
            statusCode: 200,
            body: {},
        }),
    },
]

module.exports = {
    routes,
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/537c0605d041e8e8cbb97fb2821817b8.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_03.모든 API 완성하기</title>
      <link href="https://runmoony.github.io/nodejs3" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_03.모든 API 완성하기" />
      <published>2021-08-16T19:36:00+09:00</published>
      <updated>2021-08-16T19:36:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs3</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs3">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;//프레임워크 없이 간단한 토이프로젝트 웹 서버 만들어보기

/**
 *블로그 포스팅 서비스
 * - 로컬 파일을 데이터베이스로 활용할 예정 (JSON)
 * - 인증 로직은 넣지 않습니다.
 * - RESTful API를 사용합니다.
 */

const http = require(&amp;quot;http&amp;quot;);

const posts = [
  {
    id: &amp;#39;my_first_post&amp;#39;,
    title: &amp;#39;My first post&amp;#39;,
    content: &amp;#39;Hello&amp;#39;,  
  },
  {
    id: &amp;#39;my_second_post&amp;#39;,
    title: &amp;#39;나의 두번째 포스트&amp;#39;,
    content: &amp;#39;Second post!&amp;#39;,
  },     
]

const server = http.createServer((req, res) =&amp;gt; {
  const POSTS_ID_REGEX = /^\/posts\/([a-zA-Z0-9-_]+)$/
  const postIdRegexResult = (req.url &amp;amp;&amp;amp; POSTS_ID_REGEX.exec(req.url)) || undefined

  if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;GET&amp;#39;) {
    const result = {
      posts: posts.map(post =&amp;gt; ({
        id: post.id,
        title: post.title,
      })),
      totalCount: posts.length,
    }

    res.statusCode = 200
    res.setHeader(&amp;#39;Content-Type&amp;#39;,&amp;#39;application/json; charset=utf-8&amp;#39;)
    res.end(JSON.stringify(result))
  } else if (postIdRegexResult) { // GET /posts/:id
    
    const postId = postIdRegexResult[1]
    const post = posts.find(post =&amp;gt; post.id === postId)

    if (post) {
      res.statusCode = 200
      res.setHeader(&amp;#39;Content-Type&amp;#39;,&amp;#39;application/json; charset=utf-8&amp;#39;)
      res.end(JSON.stringify(post))
    } else {
      res.statusCode = 404
      res.end(&amp;#39;Post not found.&amp;#39;)
    }
  } else if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;POST&amp;#39;) {
    req.setEncoding(&amp;#39;utf-8&amp;#39;)
    req.on(&amp;#39;data&amp;#39;, (data) =&amp;gt; {
      const body = JSON.parse(data)
      console.log(body)
      posts.push({
        id: body.title.toLowerCase().replace(/\s/g,&amp;#39;_&amp;#39;),
        title: body.title,
        content: body.content,
      })
    })

    res.statusCode = 200
    res.end(&amp;#39;Creating post&amp;#39;)
  } else {
    res.statusCode = 404
    res.end(&amp;#39;Not found.&amp;#39;)
  }
});

const PORT = 4000

server.listen(PORT, () =&amp;gt; {
  console.log(&amp;#39;The server is good!&amp;#39;)
});
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/c684849c1b88dd210512aabf7cd382b0.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출</title>
      <link href="https://runmoony.github.io/nodejs2" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출" />
      <published>2021-08-14T23:10:00+09:00</published>
      <updated>2021-08-14T23:10:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs2</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;//프레임워크 없이 간단한 토이프로젝트 웹 서버 만들어보기

/**
 *블로그 포스팅 서비스
 * - 로컬 파일을 데이터베이스로 활용할 예정 (JSON)
 * - 인증 로직은 넣지 않습니다.
 * - RESTful API를 사용합니다.
 */

const http = require(&amp;quot;http&amp;quot;)

const server = http.createServer((req, res) =&amp;gt; {
  const POSTS_ID_REGEX = /^\/posts\/([a-zA-Z0-9-_]+)$/
  const postIdRegexResult = (req.url &amp;amp;&amp;amp; POSTS_ID_REGEX.exec(req.url)) || undefined

  if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;GET&amp;#39;) {
    res.statusCode = 200
    res.end(&amp;#39;Lists of posts&amp;#39;)
  } else if (postIdRegexResult) { // GET /posts/:id
    const postId = postIdRegexResult[1]
    console.log(`postId: ${postId}`)
    res.statusCode = 200
    res.end(&amp;#39;Reading a post&amp;#39;)
  } else if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;POST&amp;#39;) {
    res.statusCode = 200
    res.end(&amp;#39;Creating post&amp;#39;)
  } else {
    res.statusCode = 404
    res.end(&amp;#39;Not found.&amp;#39;)
  }
});

const PORT = 4000;

server.listen(PORT, () =&amp;gt; {
  console.log(&amp;#39;The server is good!&amp;#39;)
});
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/c8e1117bf47f976843246e6192b0ba32.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리</title>
      <link href="https://runmoony.github.io/nodejs1" rel="alternate" type="text/html" title="프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리" />
      <published>2021-08-13T23:10:00+09:00</published>
      <updated>2021-08-13T23:10:00+09:00</updated>
      <id>https://runmoony.github.io/nodejs1</id>
      <content type="html" xml:base="https://runmoony.github.io/nodejs1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;nodejs 목차&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs1&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs2&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs3&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs4&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs5&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs6&quot;&gt;프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./nodejs7&quot;&gt;Express로 웹 사이트 만들기_01.미들웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;//프레임워크 없이 간단한 토이프로젝트 웹 서버 만들어보기

/**
 *블로그 포스팅 서비스
 * - 로컬 파일을 데이터베이스로 활용할 예정 (JSON)
 * - 인증 로직은 넣지 않습니다.
 * - RESTful API를 사용합니다.
 */

const http = require(&amp;#39;http&amp;#39;)

const server = http.createServer((req, res) =&amp;gt; {
  if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;GET&amp;#39;) {
    res.statusCode = 200
    res.end(&amp;#39;OK&amp;#39;)
  } else if (req.url &amp;amp;&amp;amp; /^\/posts\/[a-zA-Z0-9-_]+$/.test(req.url)) {
    res.statusCode = 200
    res.end(&amp;#39;Some content of the post&amp;#39;)
  } else if (req.url === &amp;#39;/posts&amp;#39; &amp;amp;&amp;amp; req.method === &amp;#39;POST&amp;#39;) {
    res.statusCode = 200
    res.end(&amp;#39;Creating post&amp;#39;)
  } else {
    res.statusCode = 404
    res.end(&amp;#39;Not found.&amp;#39;)
  }
})

const PORT = 4000

server.listen(PORT, () =&amp;gt; {
  console.log(&amp;#39;The server is good!&amp;#39;)
})
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/RunMoony/86b63f277aa6f3df4c9586058e0b188a.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>RunMoony</name>
        
        
      </author>

      

      
        <category term="nodejs" />
      

      
        <summary type="html">nodejs 목차 프레임워크 없이 간단한 RESTful API 서버 만들어보기_01.단순한 API 라우팅 처리 프레임워크 없이 간단한 RESTful API 서버 만들어보기_02. 정규식을 활용한 URL 인자 추출 프레임워크 없이 간단한 RESTful API 서버 만들어보기_03. 모든 API 완성하기 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 1 프레임워크 없이 간단한 RESTful API 서버 만들어보기_04. 가독성과 유지보수성을 살리는 리팩토링 2 프레임워크 없이 간단한 RESTful API 서버 만들어보기_05. JSON 파일을 데이터베이스로 활용해 마무리하기 Express로 웹 사이트 만들기_01.미들웨어</summary>
      

      
      
    </entry>
  
</feed>
